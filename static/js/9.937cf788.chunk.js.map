{"version":3,"sources":["utils/utils.ts","utils/axios.ts","pages/Repositories/Repositories.tsx"],"names":["updateObject","oldObject","updatedProperties","httpAxios","axios","create","baseURL","process","headers","Title","Repositories","useMeQuery","meData","data","fetching","useState","repositories","setRepositories","loading","setLoading","usePostRepositoryMutation","postRepository","openModal","setOpenModal","useGetRepositoriesQuery","repositoryData","getTrendingRepositories","a","page","get","params","language","me","value","repoItems","useEffect","onClickBookmark","item","getRepositories","length","input","title","href","description","onCloseModal","throttledOnClickBookmark","useMemo","_","throttle","bookmarkedRepo","some","repo","toggleModal","open","content","onCancel","style","padding","level","color","itemLayout","dataSource","map","repository","substring","renderItem","Item","extra","type","icon","className","onClick","Meta","avatar","target"],"mappings":"wLAKaA,EAAe,SAACC,EAAmBC,GAC9C,OAAO,2BACFD,GACAC,I,SCNMC,E,OAAYC,EAAMC,OAAO,CACpCC,QAASC,iEACTC,QAAS,CACP,eAAgB,uB,wUCUZC,E,IAAAA,MAIKC,EAA4C,SAAC,GAAQ,qBACfC,cADc,sBAChDC,EADgD,EACtDC,KADsD,KACxCC,SACiBC,mBAAS,KAFc,mBAExDC,EAFwD,KAE1CC,EAF0C,OAGjCF,oBAAkB,GAHe,mBAGxDG,EAHwD,KAG/CC,EAH+C,OAIpCC,cAAlBC,EAJsD,sBAK7BN,oBAAkB,GALW,mBAKxDO,EALwD,KAK7CC,EAL6C,OAQ3DC,cAR2D,sBAOrDC,EAPqD,EAO3DZ,KAGEa,GAVyD,EAOrCZ,SAGG,uCAAG,gDAAAa,EAAA,6DAAOC,EAAP,+BAAsC,EACpET,GAAW,GADmB,SAENhB,IAAU0B,IAAV,oBAAmC,CACzDC,OAAQ,CACNF,KAAMA,EACNG,SAAQ,OAAEnB,QAAF,IAAEA,GAAF,UAAEA,EAAQoB,UAAV,iBAAE,EAAYD,gBAAd,aAAE,EAAsBE,SALN,QAExBC,EAFwB,SAQjB,OAAIA,QAAJ,IAAIA,KAAWrB,MAC1BI,EAAe,OAACiB,QAAD,IAACA,GAAD,UAACA,EAAWrB,YAAZ,aAAC,EAAiBA,MAEnCM,GAAW,GAXmB,2CAAH,sDAsC7BgB,qBAAU,WACRT,MACC,IAEH,IAAMU,EAAe,uCAAG,WAAOC,GAAP,eAAAV,EAAA,2DAEN,OAAdF,QAAc,IAAdA,KAAgBa,kBACF,OAAdb,QAAc,IAAdA,GAAA,UAAAA,EAAgBa,uBAAhB,eAAiCC,SAAU,IAHvB,uBAKpBhB,GAAcD,GALM,0CAQhBD,EAAe,CACnBmB,MAAO,CACLC,MAAOJ,EAAKI,MACZC,KAAML,EAAKK,KACXC,YAAaN,EAAKM,eAZA,2CAAH,sDAiBfC,EAAe,WACnBrB,GAAcD,IAGVuB,EAA2BC,mBAC/B,kBAAMC,IAAEC,SAASZ,EAAiB,OAClC,IAGF,GAAIlB,EACF,OAAO,cAAC,IAAD,IAGT,IAAM+B,EAAiB,SAACZ,GAAe,IAAD,EACpC,cAAQZ,QAAR,IAAQA,GAAR,UAAQA,EAAgBa,uBAAxB,aAAO,EAA0CY,MAC/C,SAACC,GAAD,OAAeA,EAAKT,OAASL,EAAKK,SAItC,OACE,gCAEE,cAAC,IAAD,CACEU,YAAa,kBAAMR,KACnBS,KAAM/B,EACNgC,QAAQ,8EACRb,MAAM,kBACNc,SAAU,kBAAMX,OAElB,sBAAKY,MAAO,CAAEC,QAAS,UAAvB,UACE,cAAChD,EAAD,CAAOiD,MAAO,EAAd,0BACA,sBAAMF,MAAO,CAAEG,MAAO,uBAAtB,+CAIF,sBACA,mBACEC,WAAW,aACXC,WAAU,YACL7C,EAAa8C,KAAI,SAACC,GACnB,OAAO,2BACFA,GADL,IAEEtB,MAAOsB,EAAWtB,MAAMuB,UAAU,SAIxCC,WAAY,SAAC5B,GACX,OACE,kBAAM6B,KAAN,CACEC,MACE,2CACEC,KAAK,OAELC,KAAM,cAAC,IAAD,KACApB,EAAeZ,GACjB,CACEiC,UAAW,8BAEb,CACEC,QAAS,kBAAM1B,EAAyBR,MAThD,aAYIY,EAAeZ,GAAgB,aAAe,cAdtD,SAkBE,kBAAM6B,KAAKM,KAAX,CACEC,OAEE,cAAC,IAAD,IAEFhC,MACE,mBAAGC,KAAML,EAAKK,KAAMgC,OAAO,SAA3B,SACGrC,EAAKI,QAGVE,YAAaN,EAAKM,uBASnBjC","file":"static/js/9.937cf788.chunk.js","sourcesContent":["/**\r\n * This is helper for object deep cloning\r\n * @param {oldObject} - old object that will be update\r\n * @param {updatedProperties} - Updated value for each the property\r\n */\r\nexport const updateObject = (oldObject: Object, updatedProperties: Object) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const httpAxios = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n","import React, { useEffect, useState, useMemo } from 'react';\r\nimport { PageHeader, List, Avatar, Divider, Button, Typography } from 'antd';\r\nimport axios from 'axios';\r\n// import { List } from '../../components';\r\nimport { httpAxios } from '../../utils';\r\nimport { GithubOutlined, BookOutlined } from '@ant-design/icons';\r\nimport {\r\n  useGetRepositoriesQuery,\r\n  useMeQuery,\r\n  usePostRepositoryMutation,\r\n} from '../../generated/graphql';\r\nimport { Loader, Modal } from '../../components';\r\nimport _ from 'lodash';\r\n// import { fetchRepositories } from '@huchenme/github-trending';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface RepositoriesProps {}\r\n\r\nexport const Repositories: React.FC<RepositoriesProps> = ({}) => {\r\n  const [{ data: meData, fetching: meFetching }] = useMeQuery();\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [, postRepository] = usePostRepositoryMutation();\r\n  const [openModal, setOpenModal] = useState<boolean>(false);\r\n  const [\r\n    { data: repositoryData, fetching: repositoryFetching },\r\n  ] = useGetRepositoriesQuery();\r\n\r\n  const getTrendingRepositories = async (page: any | null | undefined = 1) => {\r\n    setLoading(true);\r\n    const repoItems = await httpAxios.get(`/get-repositories`, {\r\n      params: {\r\n        page: page,\r\n        language: meData?.me?.language?.value,\r\n      },\r\n    });\r\n    if (repoItems && repoItems?.data) {\r\n      setRepositories(repoItems?.data?.data);\r\n    }\r\n    setLoading(false);\r\n    // if (repoItems && repoItems.data) {\r\n    //   const repos = repoItems?.data?.repositories?.items?.map((repo: any) => {\r\n    //     return {\r\n    //       href: repo.clone_url,\r\n    //       title: repo.name,\r\n    //       avatar: repo?.owner?.avatar_url,\r\n    //       description: `${repo?.owner?.login} - ${moment(\r\n    //         repo.created_at\r\n    //       ).format('MMMM DD, YYYY')}`,\r\n    //       content: repo.description,\r\n    //       user: {\r\n    //         ...repo.owner,\r\n    //       },\r\n    //       comments_count: repo.comments_count,\r\n    //       tag_list: article.tag_list,\r\n    //       public_reactions_count: article.public_reactions_count,\r\n    //       positive_reactions_count: article.positive_reactions_count,\r\n    //       ...article,\r\n    //     };\r\n    //   });\r\n    //   setRepositories(repos);\r\n    // }\r\n  };\r\n\r\n  // console.log(repositoryData?.getRespositories);\r\n\r\n  useEffect(() => {\r\n    getTrendingRepositories();\r\n  }, []);\r\n\r\n  const onClickBookmark = async (item: any) => {\r\n    if (\r\n      repositoryData?.getRepositories &&\r\n      repositoryData?.getRepositories?.length >= 10\r\n    ) {\r\n      setOpenModal(!openModal);\r\n      return;\r\n    }\r\n    await postRepository({\r\n      input: {\r\n        title: item.title,\r\n        href: item.href,\r\n        description: item.description,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setOpenModal(!openModal);\r\n  };\r\n\r\n  const throttledOnClickBookmark = useMemo(\r\n    () => _.throttle(onClickBookmark, 1000),\r\n    []\r\n  );\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  const bookmarkedRepo = (item: any) => {\r\n    return (repositoryData?.getRepositories as any)?.some(\r\n      (repo: any) => repo.href === item.href\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <PageHeader className=\"site-page-header\" title=\"Repositories\" /> */}\r\n      <Modal\r\n        toggleModal={() => onCloseModal()}\r\n        open={openModal}\r\n        content=\"You've already reached the maximum number of repositories to be bookmarked.\"\r\n        title=\"Cannot bookmark\"\r\n        onCancel={() => onCloseModal()}\r\n      />\r\n      <div style={{ padding: '0 16px' }}>\r\n        <Title level={3}>Repositories</Title>\r\n        <span style={{ color: 'rgba(0, 0, 0, 0.45)' }}>\r\n          {`List of trending repositories.`}\r\n        </span>\r\n      </div>\r\n      <Divider />\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={[\r\n          ...repositories.map((repository: any) => {\r\n            return {\r\n              ...repository,\r\n              title: repository.title.substring(1),\r\n            };\r\n          }),\r\n        ]}\r\n        renderItem={(item: any) => {\r\n          return (\r\n            <List.Item\r\n              extra={\r\n                <Button\r\n                  type=\"link\"\r\n                  // onClick={() => throttledOnClickBookmark(item)}\r\n                  icon={<BookOutlined />}\r\n                  {...((bookmarkedRepo(item) as any)\r\n                    ? {\r\n                        className: 'btn-warning cursor-default',\r\n                      }\r\n                    : {\r\n                        onClick: () => throttledOnClickBookmark(item),\r\n                      })}\r\n                >\r\n                  {(bookmarkedRepo(item) as any) ? 'Bookmarked' : 'Bookmark'}\r\n                </Button>\r\n              }\r\n            >\r\n              <List.Item.Meta\r\n                avatar={\r\n                  // <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\r\n                  <GithubOutlined />\r\n                }\r\n                title={\r\n                  <a href={item.href} target=\"_blank\">\r\n                    {item.title}\r\n                  </a>\r\n                }\r\n                description={item.description}\r\n              />\r\n            </List.Item>\r\n          );\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Repositories;\r\n"],"sourceRoot":""}