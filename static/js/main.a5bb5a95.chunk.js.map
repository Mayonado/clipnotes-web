{"version":3,"sources":["context/ModalContext/ModalContext.tsx","generated/graphql.tsx","pages/Login/Login.tsx","utils/betterUpdateQuery.ts","utils/createUrqlClient.ts","hoc/Layout/Layout.tsx","components/ProtectedRoute/ProtectedRoute.tsx","App/App.tsx","reportWebVitals.ts","index.tsx","components/Nav/Nav.tsx","components/Loader/Loader.tsx","components/Breadcrumb/Breadcrumb.tsx","components/List/List.tsx","components/Modal/Modal.tsx","components/ConfirmationModal/ConfirmationModal.tsx","components/Empty/Empty.tsx"],"names":["ModalContext","createContext","ModalProvider","children","useState","open","setOpen","title","content","onCancelFunction","onOkFunction","modalConfig","setModalConfig","Provider","value","show","hide","ArticleFragmentDoc","gql","InterestFragmentDoc","LanguageFragmentDoc","RepositoryFragmentDoc","UserFragmentDoc","PostBookmarkDocument","usePostBookmarkMutation","Urql","DeleteBookmarkDocument","useDeleteBookmarkMutation","DeleteRepositoryDocument","useDeleteRepositoryMutation","LoginDocument","useLoginMutation","LogoutDocument","useLogoutMutation","PatchProfileDocument","usePatchProfileMutation","PostRepositoryDocument","usePostRepositoryMutation","GetUserArticlesDocument","useGetUserArticlesQuery","options","query","GetLanguageDocument","useGetLanguageQuery","GetRepositoriesDocument","useGetRepositoriesQuery","MeDocument","useMeQuery","logoImg","Title","process","Login","history","email","tokenId","login","me","data","fetching","to","onSuccessGoogleLogin","response","a","profileObj","accessToken","className","src","clientId","onSuccess","onFailure","render","renderProps","type","block","size","icon","GoogleOutlined","disabled","onClick","buttonText","cookiePolicy","betterUpdateQuery","cache","qi","result","fn","updateQuery","createUrqlClient","createClient","url","fetchOptions","credentials","exchanges","dedupExchange","cacheExchange","updates","Mutation","_result","args","info","errors","user","patchProfile","postBookmark","res","datas","getUserArticles","articles","push","deleteBookmark","newDataSet","filter","article","id","postRepository","getRepositories","deleteRepository","repoIndex","findIndex","repo","splice","fetchExchange","Content","Footer","menus","label","link","GithubOutlined","ReadOutlined","Layout","props","modal","useContext","style","padding","marginTop","minHeight","textAlign","moment","format","ProtectedRoute","Component","component","path","Repositories","React","lazy","Articles","Bookmarks","Profile","Page404","App","fallback","basename","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","Header","SubMenu","Nav","location","useLocation","logout","meData","onLogoutUser","window","href","position","zIndex","width","mode","defaultSelectedKeys","some","menu","pathname","activeKey","map","Item","UserOutlined","first_name","last_name","float","ProfileOutlined","BookOutlined","LogoutOutlined","Loader","Breadcrumb","margin","find","List","listData","onClickBookmark","onChangePage","total","onDeleteBookmark","page","IconText","iconProp","createElement","text","bookmarked","item","bookmark","idno","itemLayout","pagination","onChange","pageSize","current","pageSizeOptions","locale","emptyText","subtitle","dataSource","renderItem","actions","StarOutlined","public_reactions_count","LikeOutlined","positive_reactions_count","MessageOutlined","comments_count","tag_list","tag","color","extra","DeleteOutlined","danger","Meta","avatar","target","description","Modal","toggleModal","onCancel","visible","footer","ConfirmationModal","Text","emptyImg","Empty","level"],"mappings":"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","file":"static/js/main.a5bb5a95.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport { Modal as AntdModal, Button, Space } from 'antd';\r\n\r\nconst ModalContext: any = createContext(null);\r\nexport const ModalProvider: React.FC<{}> = ({ children }) => {\r\n  const [open, setOpen] = useState<Boolean>(false);\r\n  const [modalConfig, setModalConfig] = useState({\r\n    title: null,\r\n    content: null,\r\n    onCancelFunction: () => {},\r\n    onOkFunction: () => {},\r\n  });\r\n\r\n  const show = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const hide = () => {\r\n    setOpen(false);\r\n  };\r\n  return (\r\n    <ModalContext.Provider\r\n      value={{\r\n        open,\r\n        show,\r\n        hide,\r\n        setModalConfig,\r\n        modalConfig,\r\n      }}\r\n    >\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ModalContext;\r\n","import gql from 'graphql-tag';\r\nimport * as React from 'react';\r\nimport * as Urql from 'urql';\r\nexport type Maybe<T> = T | null;\r\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\r\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n};\r\n\r\nexport type Article = {\r\n  __typename?: 'Article';\r\n  id: Scalars['Int'];\r\n  userId: Scalars['Int'];\r\n  idno: Scalars['String'];\r\n  href: Scalars['String'];\r\n  title: Scalars['String'];\r\n  description: Scalars['String'];\r\n  content: Scalars['String'];\r\n  comments_count: Scalars['String'];\r\n  public_reactions_count: Scalars['String'];\r\n  positive_reactions_count: Scalars['String'];\r\n  avatar: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n};\r\n\r\nexport type Articles = {\r\n  __typename?: 'Articles';\r\n  articles?: Maybe<Array<Article>>;\r\n};\r\n\r\nexport type FieldError = {\r\n  __typename?: 'FieldError';\r\n  field: Scalars['String'];\r\n  message: Scalars['String'];\r\n};\r\n\r\nexport type Interest = {\r\n  __typename?: 'Interest';\r\n  id: Scalars['Int'];\r\n  userId: Scalars['Int'];\r\n  interest: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type Language = {\r\n  __typename?: 'Language';\r\n  id: Scalars['Int'];\r\n  language: Scalars['String'];\r\n  value: Scalars['String'];\r\n  color: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  register: UserResponse;\r\n  login: UserResponse;\r\n  patchProfile: UserResponse;\r\n  logout: Scalars['Boolean'];\r\n  postBookmark: Response;\r\n  deleteBookmark: Response;\r\n  postRepository: RepositoryResponse;\r\n  deleteRepository: Scalars['Boolean'];\r\n};\r\n\r\n\r\nexport type MutationRegisterArgs = {\r\n  options: InputRegistration;\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  options: InputLogin;\r\n};\r\n\r\n\r\nexport type MutationPatchProfileArgs = {\r\n  options: InputPatchUser;\r\n};\r\n\r\n\r\nexport type MutationPostBookmarkArgs = {\r\n  input: InputBookmark;\r\n};\r\n\r\n\r\nexport type MutationDeleteBookmarkArgs = {\r\n  id: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationPostRepositoryArgs = {\r\n  input: InputRepository;\r\n};\r\n\r\n\r\nexport type MutationDeleteRepositoryArgs = {\r\n  id: Scalars['Int'];\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  me?: Maybe<User>;\r\n  getUserArticles?: Maybe<Articles>;\r\n  getLanguages: Array<Language>;\r\n  getRepositories: Array<Repository>;\r\n};\r\n\r\nexport type Repository = {\r\n  __typename?: 'Repository';\r\n  id: Scalars['Int'];\r\n  userId: Scalars['Int'];\r\n  href: Scalars['String'];\r\n  title: Scalars['String'];\r\n  description: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n};\r\n\r\nexport type RepositoryResponse = {\r\n  __typename?: 'RepositoryResponse';\r\n  code: Scalars['Float'];\r\n  message: Scalars['String'];\r\n  data: Repository;\r\n};\r\n\r\nexport type Response = {\r\n  __typename?: 'Response';\r\n  code: Scalars['Float'];\r\n  message: Scalars['String'];\r\n  data?: Maybe<Article>;\r\n};\r\n\r\nexport type User = {\r\n  __typename?: 'User';\r\n  id: Scalars['Int'];\r\n  email: Scalars['String'];\r\n  languageId?: Maybe<Scalars['Int']>;\r\n  first_name: Scalars['String'];\r\n  last_name: Scalars['String'];\r\n  avatar: Scalars['String'];\r\n  createdAt: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n  interests: Array<Interest>;\r\n  language?: Maybe<Language>;\r\n};\r\n\r\nexport type UserResponse = {\r\n  __typename?: 'UserResponse';\r\n  errors?: Maybe<Array<FieldError>>;\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type InputBookmark = {\r\n  href: Scalars['String'];\r\n  idno: Scalars['String'];\r\n  title: Scalars['String'];\r\n  description: Scalars['String'];\r\n  content: Scalars['String'];\r\n  comments_count: Scalars['Float'];\r\n  public_reactions_count: Scalars['Float'];\r\n  positive_reactions_count: Scalars['Float'];\r\n  avatar: Scalars['String'];\r\n};\r\n\r\nexport type InputLogin = {\r\n  tokenId: Scalars['String'];\r\n  email: Scalars['String'];\r\n};\r\n\r\nexport type InputPatchUser = {\r\n  email: Scalars['String'];\r\n  first_name: Scalars['String'];\r\n  last_name: Scalars['String'];\r\n  interests: Array<Scalars['String']>;\r\n  languageId: Scalars['Int'];\r\n};\r\n\r\nexport type InputRegistration = {\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n  email: Scalars['String'];\r\n  first_name: Scalars['String'];\r\n  last_name: Scalars['String'];\r\n};\r\n\r\nexport type InputRepository = {\r\n  title: Scalars['String'];\r\n  href: Scalars['String'];\r\n  description: Scalars['String'];\r\n};\r\n\r\nexport type ArticleFragment = (\r\n  { __typename?: 'Article' }\r\n  & Pick<Article, 'id' | 'href' | 'idno' | 'title' | 'description' | 'content' | 'comments_count' | 'public_reactions_count' | 'positive_reactions_count' | 'avatar'>\r\n);\r\n\r\nexport type InterestFragment = (\r\n  { __typename?: 'Interest' }\r\n  & Pick<Interest, 'id' | 'interest'>\r\n);\r\n\r\nexport type LanguageFragment = (\r\n  { __typename?: 'Language' }\r\n  & Pick<Language, 'id' | 'language' | 'color' | 'value'>\r\n);\r\n\r\nexport type RepositoryFragment = (\r\n  { __typename?: 'Repository' }\r\n  & Pick<Repository, 'id' | 'title' | 'description' | 'href'>\r\n);\r\n\r\nexport type ResponseFragment = (\r\n  { __typename?: 'Response' }\r\n  & Pick<Response, 'code' | 'message'>\r\n);\r\n\r\nexport type UserFragment = (\r\n  { __typename?: 'User' }\r\n  & Pick<User, 'id' | 'email' | 'first_name' | 'last_name' | 'avatar'>\r\n);\r\n\r\nexport type PostBookmarkMutationVariables = Exact<{\r\n  input: InputBookmark;\r\n}>;\r\n\r\n\r\nexport type PostBookmarkMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { postBookmark: (\r\n    { __typename?: 'Response' }\r\n    & Pick<Response, 'code' | 'message'>\r\n    & { data?: Maybe<(\r\n      { __typename?: 'Article' }\r\n      & ArticleFragment\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type DeleteBookmarkMutationVariables = Exact<{\r\n  id: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type DeleteBookmarkMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { deleteBookmark: (\r\n    { __typename?: 'Response' }\r\n    & Pick<Response, 'code' | 'message'>\r\n    & { data?: Maybe<(\r\n      { __typename?: 'Article' }\r\n      & ArticleFragment\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type DeleteRepositoryMutationVariables = Exact<{\r\n  id: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type DeleteRepositoryMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'deleteRepository'>\r\n);\r\n\r\nexport type LoginMutationVariables = Exact<{\r\n  options: InputLogin;\r\n}>;\r\n\r\n\r\nexport type LoginMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { login: (\r\n    { __typename?: 'UserResponse' }\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & { interests: Array<(\r\n        { __typename?: 'Interest' }\r\n        & InterestFragment\r\n      )> }\r\n      & UserFragment\r\n    )>, errors?: Maybe<Array<(\r\n      { __typename?: 'FieldError' }\r\n      & Pick<FieldError, 'field' | 'message'>\r\n    )>> }\r\n  ) }\r\n);\r\n\r\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type LogoutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'logout'>\r\n);\r\n\r\nexport type PatchProfileMutationVariables = Exact<{\r\n  options: InputPatchUser;\r\n}>;\r\n\r\n\r\nexport type PatchProfileMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { patchProfile: (\r\n    { __typename?: 'UserResponse' }\r\n    & { user?: Maybe<(\r\n      { __typename?: 'User' }\r\n      & { interests: Array<(\r\n        { __typename?: 'Interest' }\r\n        & InterestFragment\r\n      )>, language?: Maybe<(\r\n        { __typename?: 'Language' }\r\n        & LanguageFragment\r\n      )> }\r\n      & UserFragment\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type PostRepositoryMutationVariables = Exact<{\r\n  input: InputRepository;\r\n}>;\r\n\r\n\r\nexport type PostRepositoryMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { postRepository: (\r\n    { __typename?: 'RepositoryResponse' }\r\n    & Pick<RepositoryResponse, 'code' | 'message'>\r\n    & { data: (\r\n      { __typename?: 'Repository' }\r\n      & RepositoryFragment\r\n    ) }\r\n  ) }\r\n);\r\n\r\nexport type GetUserArticlesQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetUserArticlesQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getUserArticles?: Maybe<(\r\n    { __typename?: 'Articles' }\r\n    & { articles?: Maybe<Array<(\r\n      { __typename?: 'Article' }\r\n      & ArticleFragment\r\n    )>> }\r\n  )> }\r\n);\r\n\r\nexport type GetLanguageQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetLanguageQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getLanguages: Array<(\r\n    { __typename?: 'Language' }\r\n    & LanguageFragment\r\n  )> }\r\n);\r\n\r\nexport type GetRepositoriesQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type GetRepositoriesQuery = (\r\n  { __typename?: 'Query' }\r\n  & { getRepositories: Array<(\r\n    { __typename?: 'Repository' }\r\n    & RepositoryFragment\r\n  )> }\r\n);\r\n\r\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type MeQuery = (\r\n  { __typename?: 'Query' }\r\n  & { me?: Maybe<(\r\n    { __typename?: 'User' }\r\n    & { interests: Array<(\r\n      { __typename?: 'Interest' }\r\n      & InterestFragment\r\n    )>, language?: Maybe<(\r\n      { __typename?: 'Language' }\r\n      & LanguageFragment\r\n    )> }\r\n    & UserFragment\r\n  )> }\r\n);\r\n\r\nexport const ArticleFragmentDoc = gql`\r\n    fragment Article on Article {\r\n  id\r\n  href\r\n  idno\r\n  title\r\n  description\r\n  content\r\n  comments_count\r\n  public_reactions_count\r\n  positive_reactions_count\r\n  avatar\r\n}\r\n    `;\r\nexport const InterestFragmentDoc = gql`\r\n    fragment Interest on Interest {\r\n  id\r\n  interest\r\n}\r\n    `;\r\nexport const LanguageFragmentDoc = gql`\r\n    fragment Language on Language {\r\n  id\r\n  language\r\n  color\r\n  value\r\n}\r\n    `;\r\nexport const RepositoryFragmentDoc = gql`\r\n    fragment Repository on Repository {\r\n  id\r\n  title\r\n  description\r\n  href\r\n}\r\n    `;\r\nexport const ResponseFragmentDoc = gql`\r\n    fragment Response on Response {\r\n  code\r\n  message\r\n}\r\n    `;\r\nexport const UserFragmentDoc = gql`\r\n    fragment User on User {\r\n  id\r\n  email\r\n  first_name\r\n  last_name\r\n  avatar\r\n}\r\n    `;\r\nexport const PostBookmarkDocument = gql`\r\n    mutation PostBookmark($input: inputBookmark!) {\r\n  postBookmark(input: $input) {\r\n    code\r\n    message\r\n    data {\r\n      ...Article\r\n    }\r\n  }\r\n}\r\n    ${ArticleFragmentDoc}`;\r\n\r\nexport const PostBookmarkComponent = (props: Omit<Urql.MutationProps<PostBookmarkMutation, PostBookmarkMutationVariables>, 'query'> & { variables?: PostBookmarkMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={PostBookmarkDocument} />\r\n);\r\n\r\n\r\nexport function usePostBookmarkMutation() {\r\n  return Urql.useMutation<PostBookmarkMutation, PostBookmarkMutationVariables>(PostBookmarkDocument);\r\n};\r\nexport const DeleteBookmarkDocument = gql`\r\n    mutation DeleteBookmark($id: Int!) {\r\n  deleteBookmark(id: $id) {\r\n    code\r\n    message\r\n    data {\r\n      ...Article\r\n    }\r\n  }\r\n}\r\n    ${ArticleFragmentDoc}`;\r\n\r\nexport const DeleteBookmarkComponent = (props: Omit<Urql.MutationProps<DeleteBookmarkMutation, DeleteBookmarkMutationVariables>, 'query'> & { variables?: DeleteBookmarkMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={DeleteBookmarkDocument} />\r\n);\r\n\r\n\r\nexport function useDeleteBookmarkMutation() {\r\n  return Urql.useMutation<DeleteBookmarkMutation, DeleteBookmarkMutationVariables>(DeleteBookmarkDocument);\r\n};\r\nexport const DeleteRepositoryDocument = gql`\r\n    mutation DeleteRepository($id: Int!) {\r\n  deleteRepository(id: $id)\r\n}\r\n    `;\r\n\r\nexport const DeleteRepositoryComponent = (props: Omit<Urql.MutationProps<DeleteRepositoryMutation, DeleteRepositoryMutationVariables>, 'query'> & { variables?: DeleteRepositoryMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={DeleteRepositoryDocument} />\r\n);\r\n\r\n\r\nexport function useDeleteRepositoryMutation() {\r\n  return Urql.useMutation<DeleteRepositoryMutation, DeleteRepositoryMutationVariables>(DeleteRepositoryDocument);\r\n};\r\nexport const LoginDocument = gql`\r\n    mutation Login($options: inputLogin!) {\r\n  login(options: $options) {\r\n    user {\r\n      ...User\r\n      interests {\r\n        ...Interest\r\n      }\r\n    }\r\n    errors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n    ${UserFragmentDoc}\r\n${InterestFragmentDoc}`;\r\n\r\nexport const LoginComponent = (props: Omit<Urql.MutationProps<LoginMutation, LoginMutationVariables>, 'query'> & { variables?: LoginMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={LoginDocument} />\r\n);\r\n\r\n\r\nexport function useLoginMutation() {\r\n  return Urql.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument);\r\n};\r\nexport const LogoutDocument = gql`\r\n    mutation Logout {\r\n  logout\r\n}\r\n    `;\r\n\r\nexport const LogoutComponent = (props: Omit<Urql.MutationProps<LogoutMutation, LogoutMutationVariables>, 'query'> & { variables?: LogoutMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={LogoutDocument} />\r\n);\r\n\r\n\r\nexport function useLogoutMutation() {\r\n  return Urql.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument);\r\n};\r\nexport const PatchProfileDocument = gql`\r\n    mutation PatchProfile($options: inputPatchUser!) {\r\n  patchProfile(options: $options) {\r\n    user {\r\n      ...User\r\n      interests {\r\n        ...Interest\r\n      }\r\n      language {\r\n        ...Language\r\n      }\r\n    }\r\n  }\r\n}\r\n    ${UserFragmentDoc}\r\n${InterestFragmentDoc}\r\n${LanguageFragmentDoc}`;\r\n\r\nexport const PatchProfileComponent = (props: Omit<Urql.MutationProps<PatchProfileMutation, PatchProfileMutationVariables>, 'query'> & { variables?: PatchProfileMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={PatchProfileDocument} />\r\n);\r\n\r\n\r\nexport function usePatchProfileMutation() {\r\n  return Urql.useMutation<PatchProfileMutation, PatchProfileMutationVariables>(PatchProfileDocument);\r\n};\r\nexport const PostRepositoryDocument = gql`\r\n    mutation PostRepository($input: inputRepository!) {\r\n  postRepository(input: $input) {\r\n    code\r\n    message\r\n    data {\r\n      ...Repository\r\n    }\r\n  }\r\n}\r\n    ${RepositoryFragmentDoc}`;\r\n\r\nexport const PostRepositoryComponent = (props: Omit<Urql.MutationProps<PostRepositoryMutation, PostRepositoryMutationVariables>, 'query'> & { variables?: PostRepositoryMutationVariables }) => (\r\n  <Urql.Mutation {...props} query={PostRepositoryDocument} />\r\n);\r\n\r\n\r\nexport function usePostRepositoryMutation() {\r\n  return Urql.useMutation<PostRepositoryMutation, PostRepositoryMutationVariables>(PostRepositoryDocument);\r\n};\r\nexport const GetUserArticlesDocument = gql`\r\n    query GetUserArticles {\r\n  getUserArticles {\r\n    articles {\r\n      ...Article\r\n    }\r\n  }\r\n}\r\n    ${ArticleFragmentDoc}`;\r\n\r\nexport const GetUserArticlesComponent = (props: Omit<Urql.QueryProps<GetUserArticlesQuery, GetUserArticlesQueryVariables>, 'query'> & { variables?: GetUserArticlesQueryVariables }) => (\r\n  <Urql.Query {...props} query={GetUserArticlesDocument} />\r\n);\r\n\r\n\r\nexport function useGetUserArticlesQuery(options: Omit<Urql.UseQueryArgs<GetUserArticlesQueryVariables>, 'query'> = {}) {\r\n  return Urql.useQuery<GetUserArticlesQuery>({ query: GetUserArticlesDocument, ...options });\r\n};\r\nexport const GetLanguageDocument = gql`\r\n    query GetLanguage {\r\n  getLanguages {\r\n    ...Language\r\n  }\r\n}\r\n    ${LanguageFragmentDoc}`;\r\n\r\nexport const GetLanguageComponent = (props: Omit<Urql.QueryProps<GetLanguageQuery, GetLanguageQueryVariables>, 'query'> & { variables?: GetLanguageQueryVariables }) => (\r\n  <Urql.Query {...props} query={GetLanguageDocument} />\r\n);\r\n\r\n\r\nexport function useGetLanguageQuery(options: Omit<Urql.UseQueryArgs<GetLanguageQueryVariables>, 'query'> = {}) {\r\n  return Urql.useQuery<GetLanguageQuery>({ query: GetLanguageDocument, ...options });\r\n};\r\nexport const GetRepositoriesDocument = gql`\r\n    query GetRepositories {\r\n  getRepositories {\r\n    ...Repository\r\n  }\r\n}\r\n    ${RepositoryFragmentDoc}`;\r\n\r\nexport const GetRepositoriesComponent = (props: Omit<Urql.QueryProps<GetRepositoriesQuery, GetRepositoriesQueryVariables>, 'query'> & { variables?: GetRepositoriesQueryVariables }) => (\r\n  <Urql.Query {...props} query={GetRepositoriesDocument} />\r\n);\r\n\r\n\r\nexport function useGetRepositoriesQuery(options: Omit<Urql.UseQueryArgs<GetRepositoriesQueryVariables>, 'query'> = {}) {\r\n  return Urql.useQuery<GetRepositoriesQuery>({ query: GetRepositoriesDocument, ...options });\r\n};\r\nexport const MeDocument = gql`\r\n    query Me {\r\n  me {\r\n    ...User\r\n    interests {\r\n      ...Interest\r\n    }\r\n    language {\r\n      ...Language\r\n    }\r\n  }\r\n}\r\n    ${UserFragmentDoc}\r\n${InterestFragmentDoc}\r\n${LanguageFragmentDoc}`;\r\n\r\nexport const MeComponent = (props: Omit<Urql.QueryProps<MeQuery, MeQueryVariables>, 'query'> & { variables?: MeQueryVariables }) => (\r\n  <Urql.Query {...props} query={MeDocument} />\r\n);\r\n\r\n\r\nexport function useMeQuery(options: Omit<Urql.UseQueryArgs<MeQueryVariables>, 'query'> = {}) {\r\n  return Urql.useQuery<MeQuery>({ query: MeDocument, ...options });\r\n};","import React, { useState } from 'react';\r\nimport { Form, Input, Button, Checkbox, Row, Col, Typography } from 'antd';\r\nimport axios from 'axios';\r\nimport './Login.less';\r\nimport {\r\n  UserOutlined,\r\n  LockOutlined,\r\n  GoogleOutlined,\r\n  LoginOutlined,\r\n} from '@ant-design/icons';\r\nimport { Input as InputField, Loader } from '../../components';\r\n\r\nimport { updateObject } from '../../utils';\r\nimport { useLoginMutation, useMeQuery } from '../../generated/graphql';\r\nimport { Redirect } from 'react-router-dom';\r\nimport GoogleLogin from 'react-google-login';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface LoginProps {\r\n  history: any;\r\n}\r\n\r\nconst logoImg = `${process.env.REACT_APP_BASENAME}images/logo.png`;\r\n\r\nexport const Login: React.FC<LoginProps> = ({ history }) => {\r\n  const [form, setForm] = useState({\r\n    email: null,\r\n    tokenId: null,\r\n  });\r\n\r\n  const [, login] = useLoginMutation();\r\n  const [{ data: me, fetching }] = useMeQuery();\r\n\r\n  if (!fetching) {\r\n    if (me?.me) {\r\n      return <Redirect to=\"/repositories\" />;\r\n    }\r\n  } else {\r\n    return <Loader />;\r\n  }\r\n\r\n  // const OnFieldChange = (evt: any, key: any) => {\r\n  //   const updatedForm: any = updateObject(form, {\r\n  //     [key]: evt.target.value,\r\n  //   });\r\n\r\n  //   setForm(updatedForm);\r\n  // };\r\n\r\n  // const onSubmitLoginForm = async () => {\r\n  //   const result = await login({ options: form });\r\n  //   console.log(result);\r\n  // };\r\n\r\n  const onSuccessGoogleLogin = async (response: any) => {\r\n    const { tokenId, profileObj, accessToken } = response;\r\n    // setForm({\r\n    //   email: profileObj.email,\r\n    //   tokenId,\r\n    // });\r\n\r\n    login({\r\n      options: {\r\n        email: profileObj.email,\r\n        tokenId,\r\n      },\r\n    });\r\n  };\r\n\r\n  const onFailedGoogleLogin = () => {};\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-header\"></div>\r\n      <div className=\"login-form-container\">\r\n        <div className=\"logo-container\">\r\n          <img src={logoImg} />\r\n          {/* <Title level={4}>Clip Book</Title> */}\r\n        </div>\r\n        <div className=\"login-google\">\r\n          <div className=\"login-note\">\r\n            Please sign-in using your google account.\r\n          </div>\r\n          <div className=\"btn-container\">\r\n            {/* <Button\r\n              type=\"primary\"\r\n              // danger\r\n              block\r\n              size=\"large\"\r\n              icon={<GoogleOutlined />}\r\n            >\r\n              Login via google\r\n            </Button> */}\r\n            <GoogleLogin\r\n              clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID as any}\r\n              onSuccess={onSuccessGoogleLogin}\r\n              onFailure={onFailedGoogleLogin}\r\n              render={renderProps => (\r\n                // <Button\r\n                // \tonClick={renderProps.onClick}\r\n                // \tclassName=\"google-button full-button\"\r\n                // \tdisabled={renderProps.disabled}\r\n                // >\r\n                // \t<div className=\"google-button-logo\">\r\n                // \t\t<img\r\n                // \t\t\tsrc={googleLogo}\r\n                // \t\t\talt=\"Google Logo\"\r\n                // \t\t/>\r\n                // \t</div>\r\n                // \t<div\r\n                // \t\tstyle={{ paddingLeft: '50px' }}\r\n                // \t>\r\n                // \t\tLogin with Google account\r\n                // \t</div>\r\n                // </Button>\r\n                <Button\r\n                  type=\"primary\"\r\n                  // danger\r\n                  block\r\n                  size=\"large\"\r\n                  icon={<GoogleOutlined />}\r\n                  disabled={renderProps.disabled}\r\n                  onClick={renderProps.onClick}\r\n                >\r\n                  Sign in with google\r\n                </Button>\r\n              )}\r\n              buttonText=\"Login\"\r\n              cookiePolicy={'single_host_origin'}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"login-footer\">C</div>\r\n    </div>\r\n    // <div className=\"login-container\">\r\n    //   <Row>\r\n    //     <Col span={6} offset={9}>\r\n    //       <Form\r\n    //         name=\"normal_login\"\r\n    //         className=\"login-form\"\r\n    //         initialValues={{ remember: true }}\r\n    //         onFinish={onSubmitLoginForm}\r\n    //       >\r\n    //         <InputField\r\n    //           label=\"Username\"\r\n    //           name=\"username\"\r\n    //           rules={{ required: true, message: 'Please input your username' }}\r\n    //           type=\"input\"\r\n    //           value={form.username}\r\n    //           onChange={evt => OnFieldChange(evt, 'username')}\r\n    //           maxLength={20}\r\n    //           autoFocus\r\n    //         />\r\n    //         <InputField\r\n    //           label=\"Password\"\r\n    //           name=\"password\"\r\n    //           width=\"100%\"\r\n    //           type=\"password\"\r\n    //           rules={{ required: true, message: 'Please input your password' }}\r\n    //           value={form.password}\r\n    //           onChange={evt => OnFieldChange(evt, 'password')}\r\n    //           maxLength={20}\r\n    //         />\r\n    //         <Form.Item>\r\n    //           <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n    //             <Checkbox>Remember me</Checkbox>\r\n    //           </Form.Item>\r\n    //         </Form.Item>\r\n\r\n    //         <Form.Item>\r\n    //           <Button\r\n    //             type=\"primary\"\r\n    //             block\r\n    //             size=\"large\"\r\n    //             icon={<LoginOutlined />}\r\n    //             htmlType=\"submit\"\r\n    //           >\r\n    //             Login\r\n    //           </Button>\r\n    //         </Form.Item>\r\n    //         <Form.Item>\r\n    //           <Button\r\n    //             type=\"primary\"\r\n    //             danger\r\n    //             block\r\n    //             size=\"large\"\r\n    //             icon={<GoogleOutlined />}\r\n    //           >\r\n    //             Login via google\r\n    //           </Button>\r\n    //         </Form.Item>\r\n    //       </Form>\r\n    //     </Col>\r\n    //   </Row>\r\n    // </div>\r\n  );\r\n};\r\nexport default Login;\r\n","import { Cache, QueryInput } from '@urql/exchange-graphcache';\r\n\r\nexport function betterUpdateQuery<Result, Query>(\r\n  cache: Cache,\r\n  qi: QueryInput,\r\n  result: any,\r\n  fn: (r: Result, q: Query) => Query\r\n) {\r\n  return cache.updateQuery(qi, data => fn(result, data as any) as any);\r\n}\r\n","import { cacheExchange } from '@urql/exchange-graphcache';\r\nimport { createClient, dedupExchange, fetchExchange } from 'urql';\r\nimport {\r\n  GetUserArticlesDocument,\r\n  GetUserArticlesQuery,\r\n  LoginMutation,\r\n  MeDocument,\r\n  MeQuery,\r\n  PostBookmarkMutation,\r\n  DeleteBookmarkMutation,\r\n  PatchProfileMutation,\r\n  GetRepositoriesQueryVariables,\r\n} from '../generated/graphql';\r\nimport { betterUpdateQuery } from './betterUpdateQuery';\r\nimport gql from 'graphql-tag';\r\n\r\nexport const createUrqlClient = createClient({\r\n  url: `${process.env.REACT_APP_API_URL}/graphql`,\r\n  fetchOptions: {\r\n    credentials: 'include',\r\n  },\r\n  exchanges: [\r\n    dedupExchange,\r\n    cacheExchange({\r\n      updates: {\r\n        Mutation: {\r\n          //   logout: (_result, args, cache, info) => {\r\n          //     betterUpdateQuery<LogoutMutation, MeQuery>(\r\n          //       cache,\r\n          //       { query: MeDocument },\r\n          //       _result,\r\n          //       () => ({ me: null })\r\n          //     );\r\n          //   },\r\n          login: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LoginMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.login.errors) {\r\n                  return query;\r\n                } else {\r\n                  // console.log(result.login.user);\r\n                  return {\r\n                    me: result.login.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n          patchProfile: (_result, args, cache, info) => {\r\n            betterUpdateQuery<PatchProfileMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                // console.log(result);\r\n                return {\r\n                  me: result.patchProfile.user,\r\n                };\r\n              }\r\n            );\r\n          },\r\n\r\n          postBookmark: (_result: any, args, cache, info) => {\r\n            betterUpdateQuery<PostBookmarkMutation, GetUserArticlesQuery>(\r\n              cache,\r\n              { query: GetUserArticlesDocument },\r\n              _result,\r\n              (res: any, query: any) => {\r\n                if (_result?.postBookmark.data) {\r\n                  cache.updateQuery(\r\n                    { query: GetUserArticlesDocument },\r\n                    (datas: any) => {\r\n                      datas.getUserArticles.articles.push(\r\n                        _result?.postBookmark?.data\r\n                      );\r\n                      return datas;\r\n                    }\r\n                  );\r\n                }\r\n                return {\r\n                  getUserArticles: {\r\n                    articles: [\r\n                      ...query.getUserArticles.articles,\r\n                      res.postBookmark.data,\r\n                    ],\r\n                  },\r\n                };\r\n              }\r\n            );\r\n          },\r\n\r\n          deleteBookmark: (_result: any, args, cache, info) => {\r\n            betterUpdateQuery<DeleteBookmarkMutation, GetUserArticlesQuery>(\r\n              cache,\r\n              { query: GetUserArticlesDocument },\r\n              _result,\r\n              (res: any, query: any) => {\r\n                if (_result?.deleteBookmark?.data) {\r\n                  cache.updateQuery(\r\n                    { query: GetUserArticlesDocument },\r\n                    (datas: any) => {\r\n                      // datas.getUserArticles.articles.push(\r\n                      //   _result?.postBookmark?.data\r\n                      // );\r\n                      const newDataSet = datas.getUserArticles.articles.filter(\r\n                        (article: any) =>\r\n                          article.id !== _result?.deleteBookmark?.data?.id\r\n                      );\r\n                      datas.getUserArticles.articles = newDataSet;\r\n                      return datas;\r\n                    }\r\n                  );\r\n                }\r\n                return {\r\n                  getUserArticles: {\r\n                    articles: query.getUserArticles.articles.filter(\r\n                      (article: any) =>\r\n                        article.id !== _result?.deleteBookmark?.data?.id\r\n                    ),\r\n                  },\r\n                };\r\n              }\r\n            );\r\n          },\r\n\r\n          postRepository: (_result: any, args, cache, info) => {\r\n            // cache.invalidate({\r\n            //   __typename: 'GetRepositories',\r\n            // });\r\n            // TODO invalidate cache\r\n            // const allFields = cache.inspectFields('Query');\r\n            // console.log(allFields);\r\n            // const fieldInfos = allFields.filter(\r\n            //   info => info.fieldName === 'getRepositories'\r\n            // );\r\n            // console.log('Field infos', fieldInfos);\r\n            // fieldInfos.forEach(fi => {\r\n            //   cache.invalidate('Query', 'getRepositories', fi.arguments || {});\r\n            // });\r\n            const getRepositories = gql`\r\n              query GetRepositories {\r\n                getRepositories {\r\n                  ...GetRepositoriesQueryVariables\r\n                }\r\n              }\r\n            `;\r\n\r\n            cache.updateQuery({ query: getRepositories }, (data: any) => {\r\n              data?.getRepositories?.push(_result?.postRepository);\r\n              return data;\r\n            });\r\n          },\r\n\r\n          deleteRepository: (_result: any, args, cache, info) => {\r\n            const getRepositories = gql`\r\n              query GetRepositories {\r\n                getRepositories {\r\n                  id\r\n                  title\r\n                  description\r\n                  href\r\n                }\r\n              }\r\n            `;\r\n\r\n            cache.updateQuery({ query: getRepositories }, (data: any) => {\r\n              // console.log(data?.getRepositories);\r\n              // const repositories = data?.getRepositories?.filter(\r\n              //   (repo: any) => repo.id !== args?.id\r\n              // );\r\n              // console.log(repositories);\r\n              const repoIndex = data?.getRepositories?.findIndex(\r\n                (repo: any) => repo.id === args?.id\r\n              );\r\n              data?.getRepositories?.splice(repoIndex, 1);\r\n              return data;\r\n            });\r\n          },\r\n\r\n          // postBookmark: (_result, args, cache, info) => {\r\n          //   betterUpdateQuery<PostBookmarkMutation, GetUserBookmarksQuery>)\r\n          //   cache,\r\n          //   { query:  GetUserBookmarksDocument },\r\n          //   _result,\r\n          //   (result, query) => {\r\n          //   }\r\n          // }\r\n          //   register: (_result, args, cache, info) => {\r\n          //     betterUpdateQuery<RegisterMutation, MeQuery>(\r\n          //       cache,\r\n          //       { query: MeDocument },\r\n          //       _result,\r\n          //       (result, query) => {\r\n          //         if (result.register.errors) {\r\n          //           return query;\r\n          //         } else {\r\n          //           return {\r\n          //             me: result.register.user,\r\n          //           };\r\n          //         }\r\n          //       }\r\n          //     );\r\n          //   },\r\n        },\r\n      },\r\n    }),\r\n    fetchExchange,\r\n  ],\r\n});\r\n","import React, { useContext } from 'react';\r\nimport { Layout as AntdLayout } from 'antd';\r\nimport './Layout.less';\r\nimport { Breadcrumb, ConfirmationModal, Nav } from '../../components';\r\nimport moment from 'moment';\r\nimport { HomeOutlined, GithubOutlined, ReadOutlined } from '@ant-design/icons';\r\nimport ModalContext from '../../context/ModalContext/ModalContext';\r\n\r\nconst { Content, Footer } = AntdLayout;\r\n\r\ninterface Layout {}\r\n\r\nconst menus = [\r\n  // {\r\n  //   label: 'Home',\r\n  //   link: '/home',\r\n  //   icon: <HomeOutlined />,\r\n  // },\r\n  {\r\n    label: 'Repositories',\r\n    link: '/repositories',\r\n    icon: <GithubOutlined />,\r\n  },\r\n  {\r\n    label: 'Articles',\r\n    link: '/articles',\r\n    icon: <ReadOutlined />,\r\n  },\r\n];\r\n\r\nexport const Layout: React.FC = props => {\r\n  const modal: any = useContext(ModalContext);\r\n  return (\r\n    <AntdLayout>\r\n      <ConfirmationModal open={modal.open} {...modal.modalConfig} />\r\n      <Nav menus={menus} />\r\n      <Content\r\n        className=\"site-layout\"\r\n        style={{ padding: '0 50px', marginTop: 64 }}\r\n      >\r\n        <Breadcrumb menus={menus} />\r\n        <div\r\n          className=\"site-layout-background\"\r\n          style={{ padding: 24, minHeight: 380 }}\r\n        >\r\n          {props.children}\r\n        </div>\r\n      </Content>\r\n      <Footer style={{ textAlign: 'center' }}>\r\n        &#169; {moment().format('YYYY')} CLIPNOTES\r\n      </Footer>\r\n    </AntdLayout>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport { Route, withRouter } from 'react-router-dom';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useMeQuery } from '../../generated/graphql';\r\nimport Layout from '../../hoc/Layout/Layout';\r\nimport { Loader } from '../../components';\r\n\r\ninterface ProtectedRouteProps {\r\n  component: any;\r\n  path: string;\r\n  exact: boolean;\r\n}\r\n\r\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({\r\n  component: Component,\r\n  path,\r\n}) => {\r\n  const [{ data, fetching }] = useMeQuery();\r\n\r\n  if (fetching) {\r\n    // * Return loader if request is processing\r\n    return <Loader />;\r\n  } else if (!data?.me) {\r\n    // * Redirect to login when user not logged in\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  // * Return high order component if user already logged-in\r\n  return (\r\n    <Layout>\r\n      <Route path={path} component={Component} />\r\n    </Layout>\r\n  );\r\n};\r\nexport default ProtectedRoute;\r\n","import React, { Suspense } from 'react';\r\nimport 'antd/dist/antd.less';\r\nimport Layout from '../hoc/Layout/Layout';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Login from '../pages/Login/Login';\r\nimport { createUrqlClient } from '../utils/createUrqlClient';\r\nimport { Provider } from 'urql';\r\nimport ProtectedRoute from '../components/ProtectedRoute/ProtectedRoute';\r\nimport { Loader } from '../components';\r\nimport { ModalProvider } from '../context/ModalContext/ModalContext';\r\nimport './App.less';\r\n// import Repositories from '../pages/Repositories/Repositories';\r\n\r\n// const Home = React.lazy(() => import('../pages/Home/Home'));\r\nconst Repositories = React.lazy(() =>\r\n  import('../pages/Repositories/Repositories')\r\n);\r\n\r\nconst Articles = React.lazy(() => import('../pages/Articles/Articles'));\r\nconst Bookmarks = React.lazy(() => import('../pages/Bookmarks/Bookmarks'));\r\nconst Profile = React.lazy(() => import('../pages/Profile/Profile'));\r\nconst Page404 = React.lazy(() => import('../pages/Page404/Page404'));\r\n\r\nexport const App: React.FC = () => {\r\n  return (\r\n    <Suspense fallback={<Loader />}>\r\n      <ModalProvider>\r\n        <Router basename={process.env.REACT_APP_BASENAME}>\r\n          <Provider value={createUrqlClient}>\r\n            <Switch>\r\n              <Route exact component={Login} path=\"/\" />\r\n              {/* <ProtectedRoute component={Home} path=\"/home\" /> */}\r\n              <ProtectedRoute\r\n                exact\r\n                component={Repositories}\r\n                path=\"/repositories\"\r\n              />\r\n              <ProtectedRoute exact component={Articles} path=\"/articles\" />\r\n              <ProtectedRoute exact component={Bookmarks} path=\"/bookmarks\" />\r\n              <ProtectedRoute exact component={Profile} path=\"/profile\" />\r\n              <Route component={Page404} />\r\n            </Switch>\r\n          </Provider>\r\n        </Router>\r\n      </ModalProvider>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.less';\r\nimport App from './App/index';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './override.less';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Menu,\r\n  Layout as AntdLayout,\r\n  Avatar,\r\n  Dropdown,\r\n  Popover,\r\n  Button,\r\n  Divider,\r\n} from 'antd';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport './Nav.less';\r\nimport {\r\n  LogoutOutlined,\r\n  UserOutlined,\r\n  SettingOutlined,\r\n  BookOutlined,\r\n  ProfileOutlined,\r\n} from '@ant-design/icons';\r\nimport { useLogoutMutation, useMeQuery } from '../../generated/graphql';\r\n\r\nconst { Header } = AntdLayout;\r\nconst { SubMenu } = Menu;\r\n\r\ninterface NavProps {\r\n  menus: any;\r\n}\r\n\r\nconst logoImg = `${process.env.REACT_APP_BASENAME}images/logo.png`;\r\nexport const Nav: React.FC<NavProps> = ({ menus, ...props }) => {\r\n  const location = useLocation();\r\n  const [open, setOpen] = useState(false);\r\n  const [{ fetching: logoutFetching }, logout] = useLogoutMutation();\r\n  const [{ data: meData, fetching: meQueryFetching }] = useMeQuery();\r\n\r\n  const onLogoutUser = async () => {\r\n    await logout();\r\n    window.location.href = '/';\r\n  };\r\n\r\n  const onClickAvatar = () => {\r\n    setOpen(!open);\r\n  };\r\n  return (\r\n    <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\r\n      <div className=\"logo\">\r\n        <img src={logoImg} />\r\n        {/* <div>CLIPBOOK</div> */}\r\n      </div>\r\n      <Menu\r\n        mode=\"horizontal\"\r\n        defaultSelectedKeys={\r\n          menus.some((menu: any) => menu.link === location.pathname)\r\n            ? menus[\r\n                menus.findIndex((menu: any) => menu.link === location.pathname)\r\n              ].label\r\n            : 'bookmarks'\r\n        }\r\n        {...(menus.findIndex((menu: any) => menu.link === location.pathname) >\r\n        -1\r\n          ? {\r\n              activeKey:\r\n                menus[\r\n                  menus.findIndex(\r\n                    (menu: any) => menu.link === location.pathname\r\n                  )\r\n                ].label,\r\n            }\r\n          : {})}\r\n      >\r\n        {menus.map((menu: any) => (\r\n          <Menu.Item key={menu.label} icon={menu.icon}>\r\n            <NavLink to={menu.link}>{menu.label}</NavLink>\r\n          </Menu.Item>\r\n        ))}\r\n        <SubMenu\r\n          key=\"SubMenu\"\r\n          icon={<UserOutlined />}\r\n          title={`${meData?.me?.first_name} ${meData?.me?.last_name}`}\r\n          style={{\r\n            float: 'right',\r\n          }}\r\n        >\r\n          <Menu.Item key=\"profile\">\r\n            <NavLink to=\"/profile\">\r\n              <ProfileOutlined /> My profile\r\n            </NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"bookmarks\">\r\n            <NavLink to=\"/bookmarks\">\r\n              <BookOutlined /> My bookmarks\r\n            </NavLink>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"setting:4\" onClick={() => onLogoutUser()}>\r\n            <LogoutOutlined /> Logout\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        {/* <div\r\n          style={{\r\n            float: 'right',\r\n            // marginRight: '20px',\r\n          }}\r\n          // icon={<LogoutOutlined />}\r\n          // onClick={onLogoutUser}\r\n        >\r\n          <Popover\r\n            style={{ width: '250px' }}\r\n            content={\r\n              <div style={{ width: '150px' }}>\r\n                <NavLink to=\"/bookmarks\">\r\n                  <Button block type=\"text\">\r\n                    Bookmarks\r\n                  </Button>\r\n                </NavLink>\r\n                <Divider style={{ margin: '4px 0' }} />\r\n                <Button block type=\"text\">\r\n                  Logout\r\n                </Button>\r\n              </div>\r\n            }\r\n            // title=\"Title\"\r\n            trigger=\"click\"\r\n            placement=\"bottomRight\"\r\n            visible={open}\r\n            onVisibleChange={onClickAvatar}\r\n          >\r\n            <Button type=\"text\">\r\n              <Avatar icon={<UserOutlined />} />\r\n            </Button>\r\n          </Popover>\r\n        </div> */}\r\n        {/* <div style={{ textAlign: 'right' }}>\r\n        </div> */}\r\n      </Menu>\r\n    </Header>\r\n  );\r\n};\r\nexport default Nav;\r\n","import React from 'react';\r\nimport { Spin, Space } from 'antd';\r\nimport './Loader.less';\r\n\r\ninterface LoaderProps {\r\n  open?: boolean;\r\n}\r\n\r\nexport const Loader: React.FC<LoaderProps> = ({ open }) => {\r\n  return (\r\n    <div className=\"loader-overlay\">\r\n      <div className=\"loader-container\">\r\n        <Spin size=\"large\" />\r\n        <div>Loading...</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { Breadcrumb as AntdBreadcrumb } from 'antd';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\ninterface BreadcrumbProps {\r\n  menus: Array<any>;\r\n}\r\n\r\nexport const Breadcrumb: React.FC<BreadcrumbProps> = ({ menus }) => {\r\n  const location = useLocation();\r\n  return (\r\n    <AntdBreadcrumb style={{ margin: '16px 0' }}>\r\n      <AntdBreadcrumb.Item>\r\n        {/* <a href=\"/\">Home</a> */}\r\n        Home\r\n      </AntdBreadcrumb.Item>\r\n      {location.pathname !== '/' && (\r\n        <AntdBreadcrumb.Item>\r\n          <a href={location.pathname}>\r\n            {!menus.some((menu: any) => menu.link === location.pathname)\r\n              ? 'Bookmarks'\r\n              : menus.find(menu => menu.link === location.pathname).label}\r\n          </a>\r\n        </AntdBreadcrumb.Item>\r\n      )}\r\n    </AntdBreadcrumb>\r\n  );\r\n};\r\nexport default Breadcrumb;\r\n","import React from 'react';\r\nimport { List as AntdList, Space, Avatar, Button, Tag } from 'antd';\r\nimport {\r\n  MessageOutlined,\r\n  LikeOutlined,\r\n  StarOutlined,\r\n  BookOutlined,\r\n  DeleteOutlined,\r\n  GithubOutlined,\r\n} from '@ant-design/icons';\r\nimport './List.less';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { Empty } from '../';\r\n\r\ninterface ListProps {\r\n  listData?: any;\r\n  onClickBookmark?: Function;\r\n  articles?: any;\r\n  onChangePage?: any;\r\n  total?: number | undefined;\r\n  onDeleteBookmark?: Function;\r\n  page?: number;\r\n}\r\n\r\n// const listData: Array<any> = [];\r\n// for (let i = 0; i < 23; i++) {\r\n//   listData.push({\r\n//     href: 'https://ant.design',\r\n//     title: `ant design part ${i}`,\r\n//     avatar: 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png',\r\n//     description:\r\n//       'Ant Design, a design language for background applications, is refined by Ant UED Team.',\r\n//     content:\r\n//       'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.',\r\n//   });\r\n// }\r\n\r\nexport const List: React.FC<ListProps> = ({\r\n  listData,\r\n  onClickBookmark,\r\n  articles,\r\n  onChangePage,\r\n  total,\r\n  onDeleteBookmark,\r\n  page,\r\n}) => {\r\n  const location = useLocation();\r\n  const IconText = (iconProp: any) => (\r\n    <Space>\r\n      {React.createElement(iconProp.icon)}\r\n      {iconProp.text}\r\n    </Space>\r\n  );\r\n\r\n  const bookmarked = (item: any) => {\r\n    return (\r\n      articles && articles.some((bookmark: any) => bookmark.idno == item.id)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AntdList\r\n      itemLayout=\"vertical\"\r\n      size=\"large\"\r\n      pagination={\r\n        total && total > 10\r\n          ? {\r\n              onChange: page => onChangePage(page),\r\n              pageSize: 10,\r\n              total: total ? total : 0,\r\n              current: page,\r\n              pageSizeOptions: ['10'],\r\n            }\r\n          : false\r\n      }\r\n      locale={{\r\n        emptyText: (\r\n          <Empty\r\n            title=\"We can't found any data!\"\r\n            subtitle={\r\n              \"We can't found any articles/repositories that you bookmark.\"\r\n            }\r\n          />\r\n        ),\r\n      }}\r\n      dataSource={listData}\r\n      renderItem={(item: any) => {\r\n        return (\r\n          <AntdList.Item\r\n            key={item.id}\r\n            actions={[\r\n              <IconText\r\n                icon={StarOutlined}\r\n                text={item?.public_reactions_count || 0}\r\n                key=\"list-vertical-star-o\"\r\n              />,\r\n              <IconText\r\n                icon={LikeOutlined}\r\n                text={item?.positive_reactions_count || 0}\r\n                key=\"list-vertical-like-o\"\r\n              />,\r\n              <IconText\r\n                icon={MessageOutlined}\r\n                text={`${item.comments_count ? item.comments_count : 0}`}\r\n                key=\"list-vertical-message\"\r\n              />,\r\n              [\r\n                ...(item && item.tag_list\r\n                  ? item.tag_list.map((tag: any) => (\r\n                      <Tag color=\"geekblue-inverse\" key={tag}>\r\n                        {tag}\r\n                      </Tag>\r\n                    ))\r\n                  : []),\r\n              ],\r\n            ]}\r\n            extra={\r\n              location.pathname !== '/bookmarks' ? (\r\n                <Button\r\n                  type=\"link\"\r\n                  {...(bookmarked(item)\r\n                    ? { className: 'btn-warning cursor-default' }\r\n                    : {})}\r\n                  icon={<BookOutlined />}\r\n                  {...(onClickBookmark && !bookmarked(item)\r\n                    ? { onClick: () => onClickBookmark(item) }\r\n                    : {})}\r\n                >\r\n                  {bookmarked(item) ? 'bookmarked' : 'bookmark'}\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  type=\"link\"\r\n                  icon={<DeleteOutlined />}\r\n                  danger\r\n                  onClick={() => {\r\n                    if (onDeleteBookmark) onDeleteBookmark(item.id);\r\n                  }}\r\n                  // {...(onClickBookmark\r\n                  //   ? { onClick: () => onClickBookmark(item) }\r\n                  //   : {})}\r\n                />\r\n                // </Button>\r\n              )\r\n            }\r\n          >\r\n            <AntdList.Item.Meta\r\n              avatar={\r\n                item.avatar ? <Avatar src={item.avatar} /> : <GithubOutlined />\r\n              }\r\n              title={\r\n                <a href={item.href} target=\"_blank\">\r\n                  {item.title}\r\n                </a>\r\n              }\r\n              description={item.description}\r\n            />\r\n          </AntdList.Item>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default List;\r\n","import React from 'react';\r\nimport { Modal as AntModal, Button, Space } from 'antd';\r\n\r\ninterface ModalProps {\r\n  toggleModal: Function;\r\n  onCancel: Function;\r\n  title?: string;\r\n  open: any;\r\n  content: string;\r\n}\r\n\r\nexport const Modal: React.FC<ModalProps> = ({\r\n  toggleModal,\r\n  onCancel,\r\n  title,\r\n  open,\r\n  content,\r\n}) => {\r\n  return (\r\n    <AntModal\r\n      {...(title ? { title: title } : {})}\r\n      visible={open}\r\n      onCancel={() => onCancel()}\r\n      footer={[\r\n        <Button onClick={() => toggleModal()} key=\"okay\">\r\n          OK\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <p>{content}</p>\r\n    </AntModal>\r\n  );\r\n};\r\nexport default Modal;\r\n","import React from 'react';\r\nimport { Modal as AntdModal, Button, Space } from 'antd';\r\nimport {\r\n  ExclamationCircleOutlined,\r\n  CloseCircleOutlined,\r\n} from '@ant-design/icons';\r\n\r\ninterface ConfirmationModalProps {\r\n  title: string;\r\n  content: string;\r\n  open: any;\r\n  onOkFunction: Function;\r\n  onCancelFunction: Function;\r\n}\r\n\r\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\r\n  title,\r\n  content,\r\n  open,\r\n  onOkFunction,\r\n  onCancelFunction,\r\n}) => {\r\n  //   const confirm = () => {\r\n  //     Modal.confirm({\r\n  //       title: title,\r\n  //       icon: <CloseCircleOutlined />,\r\n  //       content: 'Bla bla ...',\r\n  //       okText: 'Yes',\r\n  //       okType: 'danger',\r\n  //       onOk: () => onOkFunction(),\r\n  //       cancelText: 'Cancel',\r\n  //       onCancel: () => onCancelFunction()\r\n  //     });\r\n  //   };\r\n  // const thisFunc = () => {\r\n  //   console.log('this is onClick function...');\r\n  // };\r\n  return (\r\n    // <Space>\r\n    //   <Button onClick={() => confirm()}>Confirm</Button>\r\n    // </Space>\r\n    <AntdModal\r\n      {...(title ? { title: title } : {})}\r\n      visible={open}\r\n      onCancel={() => onCancelFunction()}\r\n      footer={[\r\n        <Button onClick={() => onCancelFunction()} key=\"cancel\">\r\n          Cancel\r\n        </Button>,\r\n        <Button onClick={() => onOkFunction()} key=\"okay\" danger>\r\n          Yes\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <p>{content}</p>\r\n    </AntdModal>\r\n  );\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","import React from 'react';\r\nimport './Empty.less';\r\nimport { Typography } from 'antd';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst emptyImg = `${process.env.REACT_APP_BASENAME}svgs/empty.svg`;\r\n\r\ninterface Empty {\r\n  title?: string;\r\n  subtitle?: string;\r\n}\r\n\r\nconst Empty: React.FC<Empty> = ({ title, subtitle }) => {\r\n  return (\r\n    <div className=\"empty-data-container\">\r\n      <div className=\"emptyImg-container\">\r\n        <img src={emptyImg} />\r\n        <div className=\"empty-text\">\r\n          <Title level={5}>{title ? title : 'No data found!'}</Title>\r\n          <Text type=\"secondary\">\r\n            {subtitle\r\n              ? subtitle\r\n              : \"We can't found any articles that you bookmark.\"}\r\n          </Text>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Empty;\r\n"],"sourceRoot":""}