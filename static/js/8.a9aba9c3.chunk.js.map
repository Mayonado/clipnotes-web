{"version":3,"sources":["utils/utils.ts","utils/axios.ts","pages/Articles/Articles.tsx"],"names":["updateObject","oldObject","updatedProperties","httpAxios","axios","create","baseURL","process","headers","Title","Articles","useMeQuery","meData","data","useState","openModal","setOpenModal","loading","setLoading","page","setPage","usePostBookmarkMutation","postBookmark","useGetUserArticlesQuery","bookmarkedArticles","useArticlesFetching","fetching","articles","setArticles","getArticles","a","get","me","id","articlesData","map","article","href","url","title","avatar","user","profile_image","description","name","moment","published_at","format","content","comments_count","tag_list","public_reactions_count","positive_reactions_count","useEffect","onClickBookmark","item","getUserArticles","length","input","idno","toString","throttledOnClickBookmark","useMemo","_","throttle","onCloseModal","style","padding","level","color","toggleModal","open","onCancel","listData","onChangePage","listPage","total"],"mappings":"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","file":"static/js/8.a9aba9c3.chunk.js","sourcesContent":["/**\r\n * This is helper for object deep cloning\r\n * @param {oldObject} - old object that will be update\r\n * @param {updatedProperties} - Updated value for each the property\r\n */\r\nexport const updateObject = (oldObject: Object, updatedProperties: Object) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const httpAxios = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { PageHeader, Divider, Typography } from 'antd';\r\nimport moment from 'moment';\r\nimport { httpAxios } from '../../utils';\r\nimport { List, Modal, Loader } from '../../components';\r\nimport {\r\n  usePostBookmarkMutation,\r\n  useGetUserArticlesQuery,\r\n  GetUserArticlesDocument,\r\n  useMeQuery,\r\n} from '../../generated/graphql';\r\nimport _ from 'lodash';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface ArticlesProps {}\r\n\r\nexport const Articles: React.FC<ArticlesProps> = ({}) => {\r\n  // const [{fetching: logoutFetching},logout] = useLogoutMutation();\r\n  const [{ data: meData }] = useMeQuery();\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [page, setPage] = useState(1);\r\n  const [, postBookmark] = usePostBookmarkMutation();\r\n  const [\r\n    { data: bookmarkedArticles, fetching: useArticlesFetching },\r\n  ] = useGetUserArticlesQuery();\r\n  const [articles, setArticles] = useState([]);\r\n\r\n  const getArticles = async (page: any | null | undefined = 1) => {\r\n    // display modal\r\n    setLoading(true);\r\n    const articles = await httpAxios.get(\r\n      `/get-articles?page=${page}&userId=${meData?.me?.id}`,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    if (articles && articles.data) {\r\n      const articlesData = articles?.data?.articles.map((article: any) => {\r\n        return {\r\n          href: article.url,\r\n          title: article.title,\r\n          avatar: article?.user?.profile_image,\r\n          description: `${article?.user?.name} - ${moment(\r\n            article.published_at\r\n          ).format('MMMM DD, YYYY')}`,\r\n          content: article.description,\r\n          user: {\r\n            ...article.user,\r\n          },\r\n          comments_count: article.comments_count,\r\n          tag_list: article.tag_list,\r\n          public_reactions_count: article.public_reactions_count,\r\n          positive_reactions_count: article.positive_reactions_count,\r\n          ...article,\r\n        };\r\n      });\r\n      setArticles(articlesData);\r\n    }\r\n    // set axios loader to false after fetching\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getArticles(page);\r\n  }, [page]);\r\n\r\n  const onClickBookmark = (item: any) => {\r\n    if (\r\n      bookmarkedArticles &&\r\n      bookmarkedArticles.getUserArticles &&\r\n      bookmarkedArticles.getUserArticles.articles &&\r\n      bookmarkedArticles?.getUserArticles.articles.length > 10\r\n    ) {\r\n      setOpenModal(!openModal);\r\n      return;\r\n    }\r\n    postBookmark({\r\n      input: {\r\n        href: item.href,\r\n        idno: item.id.toString(),\r\n        title: item.title,\r\n        description: item.description,\r\n        content: item.content,\r\n        comments_count: item.comments_count,\r\n        public_reactions_count: item.public_reactions_count,\r\n        positive_reactions_count: item.positive_reactions_count,\r\n        avatar: item.avatar,\r\n      },\r\n    });\r\n\r\n    // getArticles();\r\n  };\r\n\r\n  const throttledOnClickBookmark = useMemo(\r\n    () => _.throttle(onClickBookmark, 1000),\r\n    []\r\n  );\r\n\r\n  const onChangePage = (listPage: number) => {\r\n    setPage(listPage);\r\n  };\r\n\r\n  const onCloseModal = () => {\r\n    setOpenModal(!openModal);\r\n  };\r\n\r\n  if (loading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ padding: '0 16px' }}>\r\n        <Title level={3}>Repositories</Title>\r\n        <span style={{ color: 'rgba(0, 0, 0, 0.45)' }}>\r\n          {`List of trending repositories.`}\r\n        </span>\r\n      </div>\r\n      <Divider />\r\n      <Modal\r\n        toggleModal={() => onCloseModal()}\r\n        open={openModal}\r\n        content=\"You've already reached the maximum number of articles to be bookmarked.\"\r\n        title=\"Cannot bookmark\"\r\n        onCancel={onCloseModal}\r\n      />\r\n      {/* <List\r\n        listData={articles}\r\n        onClickBookmark={onClickBookmark}\r\n        articles={bookmarkedArticles?.getUserArticles?.articles}\r\n        onChangePage={onChangePage}\r\n        total={100}\r\n      /> */}\r\n      {useArticlesFetching ? (\r\n        <Loader />\r\n      ) : (\r\n        <List\r\n          listData={articles}\r\n          onClickBookmark={throttledOnClickBookmark}\r\n          articles={bookmarkedArticles?.getUserArticles?.articles}\r\n          onChangePage={onChangePage}\r\n          total={100}\r\n          page={page}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Articles;\r\n"],"sourceRoot":""}