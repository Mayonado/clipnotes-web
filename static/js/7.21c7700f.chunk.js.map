{"version":3,"sources":["utils/utils.ts","utils/axios.ts","pages/Articles/Articles.tsx"],"names":["updateObject","oldObject","updatedProperties","httpAxios","axios","create","baseURL","process","headers","Title","Articles","loader","useContext","LoaderContext","useMeQuery","meData","data","useState","openModal","setOpenModal","usePostBookmarkMutation","postBookmark","useGetUserArticlesQuery","bookmarkedArticles","useArticlesFetching","fetching","articles","setArticles","getArticles","a","show","get","me","id","articlesData","map","article","href","url","title","avatar","user","profile_image","description","name","moment","published_at","format","content","tag_list","hide","useEffect","onClickBookmark","item","getUserArticles","length","input","idno","toString","author","tags","JSON","stringify","throttledOnClickBookmark","useMemo","_","throttle","onCloseModal","className","level","style","color","language","value","toggleModal","open","onCancel","listData"],"mappings":"wLAKaA,EAAe,SAACC,EAAmBC,GAC9C,OAAO,2BACFD,GACAC,I,SCNMC,E,OAAYC,EAAMC,OAAO,CACpCC,QAASC,wBACTC,QAAS,CACP,eAAgB,uB,gUCWZC,E,IAAAA,MAIKC,EAAoC,SAAC,GAAQ,IAAD,yBAEvD,IAAMC,EAAcC,qBAAWC,KAFwB,EAG5BC,cAAZC,EAHwC,oBAG9CC,KAH8C,EAIrBC,oBAAS,GAJY,mBAIhDC,EAJgD,KAIrCC,EAJqC,OAM9BC,cAAhBC,EAN8C,sBASnDC,cATmD,sBAQ7CC,EAR6C,EAQnDP,KAAoCQ,EARe,EAQzBC,SARyB,EAUvBR,mBAAS,IAVc,mBAUhDS,EAVgD,KAUtCC,EAVsC,KAYjDC,EAAW,uCAAG,kCAAAC,EAAA,6DAElBlB,EAAOmB,OAFW,SAKK3B,IAAU4B,IAAV,sCACGhB,QADH,IACGA,GADH,UACGA,EAAQiB,UADX,aACG,EAAYC,IACpC,CACEzB,QAAS,CACP,eAAgB,sBATJ,QAKZkB,EALY,SAaFA,EAASV,OACjBkB,EADuB,OACRR,QADQ,IACRA,GADQ,UACRA,EAAUV,YADF,aACR,EAAgBU,SAASS,KAAI,SAACC,GAAkB,IAAD,IAClE,MAAO,CACLH,GAAIG,EAAQH,GACZI,KAAMD,EAAQE,IACdC,MAAOH,EAAQG,MACfC,OAAM,OAAEJ,QAAF,IAAEA,GAAF,UAAEA,EAASK,YAAX,aAAE,EAAeC,cACvBC,YAAY,GAAD,cAAKP,QAAL,IAAKA,GAAL,UAAKA,EAASK,YAAd,aAAK,EAAeG,KAApB,cAA8BC,IACvCT,EAAQU,cACRC,OAAO,kBACTC,QAASZ,EAAQO,YACjBM,SAAUb,EAAQa,aAUtBtB,EAAYO,IAGdvB,EAAOuC,OArCW,2CAAH,qDAwCjBC,qBAAU,WACRvB,MACC,IAEH,IAAMwB,EAAkB,SAACC,GAErB9B,GACAA,EAAmB+B,iBACnB/B,EAAmB+B,gBAAgB5B,WACjB,OAAlBH,QAAkB,IAAlBA,OAAA,EAAAA,EAAoB+B,gBAAgB5B,SAAS6B,QAAS,GAEtDpC,GAAcD,GAGhBG,EAAa,CACXmC,MAAO,CACLnB,KAAMgB,EAAKhB,KACXoB,KAAMJ,EAAKpB,GAAGyB,WACdnB,MAAOc,EAAKd,MACZoB,OAAQN,EAAKV,YACbK,QAASK,EAAKL,QACdY,KAAMC,KAAKC,UAAUT,EAAKJ,UAC1BT,OAAQa,EAAKb,WAObuB,EAA2BC,mBAC/B,kBAAMC,IAAEC,SAASd,EAAiB,OAClC,IAOIe,EAAe,WACnBhD,GAAcD,IAGhB,OACE,sBAAKkD,UAAU,gBAAf,UACE,sBAAKA,UAAU,aAAf,UACE,cAAC3D,EAAD,CAAO4D,MAAO,EAAd,sBACA,uBAAMC,MAAO,CAAEC,MAAO,uBAAtB,iDAC2C,OAEpC,OAANxD,QAAM,IAANA,GAAA,UAAAA,EAAQiB,UAAR,mBAAYwC,gBAAZ,SAAsBC,MACrB,qCACE,sBAAMH,MAAO,CAAEC,MAAO,uBAAtB,6BAGA,mCAAMxD,QAAN,IAAMA,GAAN,UAAMA,EAAQiB,UAAd,iBAAM,EAAYwC,gBAAlB,aAAM,EAAsBA,cAG9B,MASJ,sBACA,cAAC,IAAD,CACEE,YAAa,kBAAMP,KACnBQ,KAAMzD,EACN8B,QAAQ,oEACRT,MAAM,cACNqC,SAAUT,IASX3C,EACC,cAAC,IAAD,IAEA,cAAC,IAAD,CACEqD,SAAUnD,EACV0B,gBAAiBW,EACjBrC,SAAQ,OAAEH,QAAF,IAAEA,GAAF,UAAEA,EAAoB+B,uBAAtB,aAAE,EAAqC5B,eAS1ChB","file":"static/js/7.21c7700f.chunk.js","sourcesContent":["/**\r\n * This is helper for object deep cloning\r\n * @param {oldObject} - old object that will be update\r\n * @param {updatedProperties} - Updated value for each the property\r\n */\r\nexport const updateObject = (oldObject: Object, updatedProperties: Object) => {\r\n  return {\r\n    ...oldObject,\r\n    ...updatedProperties,\r\n  };\r\n};\r\n","import axios from 'axios';\r\n\r\nexport const httpAxios = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Divider, Typography, Tag } from 'antd';\r\nimport moment from 'moment';\r\nimport { httpAxios } from '../../utils';\r\nimport { List, Modal, Loader } from '../../components';\r\nimport {\r\n  usePostBookmarkMutation,\r\n  useGetUserArticlesQuery,\r\n  // GetUserArticlesDocument,\r\n  useMeQuery,\r\n} from '../../generated/graphql';\r\nimport _ from 'lodash';\r\nimport { useContext } from 'react';\r\nimport LoaderContext from '../../context/LoaderContext/LoaderContext';\r\nimport './Articles.less';\r\n\r\nconst { Title } = Typography;\r\n\r\ninterface ArticlesProps {}\r\n\r\nexport const Articles: React.FC<ArticlesProps> = ({}) => {\r\n  // const [{fetching: logoutFetching},logout] = useLogoutMutation();\r\n  const loader: any = useContext(LoaderContext);\r\n  const [{ data: meData }] = useMeQuery();\r\n  const [openModal, setOpenModal] = useState(false);\r\n  // const [page, setPage] = useState(1);\r\n  const [, postBookmark] = usePostBookmarkMutation();\r\n  const [\r\n    { data: bookmarkedArticles, fetching: useArticlesFetching },\r\n  ] = useGetUserArticlesQuery();\r\n  const [articles, setArticles] = useState([]);\r\n\r\n  const getArticles = async () => {\r\n    // displays loader on http request\r\n    loader.show();\r\n\r\n    // axios request to articles endpoint\r\n    const articles = await httpAxios.get(\r\n      `/get-articles?userId=${meData?.me?.id}`,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    if (articles && articles.data) {\r\n      const articlesData = articles?.data?.articles.map((article: any) => {\r\n        return {\r\n          id: article.id,\r\n          href: article.url,\r\n          title: article.title,\r\n          avatar: article?.user?.profile_image,\r\n          description: `${article?.user?.name} - ${moment(\r\n            article.published_at\r\n          ).format('MMMM DD, YYYY')}`,\r\n          content: article.description,\r\n          tag_list: article.tag_list,\r\n          // user: {\r\n          //   ...article.user,\r\n          // },\r\n          // comments_count: article.comments_count,\r\n          // public_reactions_count: article.public_reactions_count,\r\n          // positive_reactions_count: article.positive_reactions_count,\r\n          // ...article,\r\n        };\r\n      });\r\n      setArticles(articlesData);\r\n    }\r\n\r\n    loader.hide();\r\n  };\r\n\r\n  useEffect(() => {\r\n    getArticles();\r\n  }, []);\r\n\r\n  const onClickBookmark = (item: any) => {\r\n    if (\r\n      bookmarkedArticles &&\r\n      bookmarkedArticles.getUserArticles &&\r\n      bookmarkedArticles.getUserArticles.articles &&\r\n      bookmarkedArticles?.getUserArticles.articles.length > 10\r\n    ) {\r\n      setOpenModal(!openModal);\r\n      return;\r\n    }\r\n    postBookmark({\r\n      input: {\r\n        href: item.href,\r\n        idno: item.id.toString(),\r\n        title: item.title,\r\n        author: item.description,\r\n        content: item.content,\r\n        tags: JSON.stringify(item.tag_list),\r\n        avatar: item.avatar,\r\n      },\r\n    });\r\n\r\n    // getArticles();\r\n  };\r\n\r\n  const throttledOnClickBookmark = useMemo(\r\n    () => _.throttle(onClickBookmark, 1000),\r\n    []\r\n  );\r\n\r\n  // const onChangePage = (listPage: number) => {\r\n  //   setPage(listPage);\r\n  // };\r\n\r\n  const onCloseModal = () => {\r\n    setOpenModal(!openModal);\r\n  };\r\n\r\n  return (\r\n    <div className=\"articles-page\">\r\n      <div className=\"page-title\">\r\n        <Title level={3}>Articles</Title>\r\n        <span style={{ color: 'rgba(0, 0, 0, 0.45)' }}>\r\n          {`List of trending articles in dev to `}{' '}\r\n        </span>\r\n        {meData?.me?.language?.value ? (\r\n          <>\r\n            <span style={{ color: 'rgba(0, 0, 0, 0.45)' }}>\r\n              filtered by&nbsp;\r\n            </span>\r\n            <Tag>{meData?.me?.language?.language}</Tag>\r\n          </>\r\n        ) : (\r\n          ''\r\n        )}\r\n        {/* {meData?.me && meData?.me?.interests?.length > 0\r\n          ? meData?.me?.interests?.map((interest: any) => {\r\n              console.log(interest);\r\n              return <Tag>{interest.interest}</Tag>;\r\n            })\r\n          : ''} */}\r\n      </div>\r\n      <Divider />\r\n      <Modal\r\n        toggleModal={() => onCloseModal()}\r\n        open={openModal}\r\n        content=\"You've already reached the maximum number of articles to be save.\"\r\n        title=\"Cannot save\"\r\n        onCancel={onCloseModal}\r\n      />\r\n      {/* <List\r\n        listData={articles}\r\n        onClickBookmark={onClickBookmark}\r\n        articles={bookmarkedArticles?.getUserArticles?.articles}\r\n        onChangePage={onChangePage}\r\n        total={100}\r\n      /> */}\r\n      {useArticlesFetching ? (\r\n        <Loader />\r\n      ) : (\r\n        <List\r\n          listData={articles}\r\n          onClickBookmark={throttledOnClickBookmark}\r\n          articles={bookmarkedArticles?.getUserArticles?.articles}\r\n          // onChangePage={onChangePage}\r\n          // total={articles.length}\r\n          // page={page}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Articles;\r\n"],"sourceRoot":""}